{
    "version": "0.1.0",
    "name": "psyfi_euros",
    "instructions": [
      {
        "name": "initializeVault",
        "docs": [
          "Instruction for initialization of VaultAccount and EpochHistory."
        ],
        "accounts": [
          {
            "name": "ownerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "managerAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "feeTokenAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "activeCollateralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "withdrawalCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "collateralAssetMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenMint",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "currentEpochHistory",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "payer",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "rent",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "uniqueSeed",
            "type": "u16"
          },
          {
            "name": "strategyType",
            "type": "u8"
          },
          {
            "name": "vaultTokenDecimals",
            "type": "u8"
          },
          {
            "name": "seedVaultTokenPerCollateral",
            "type": {
              "defined": "ExchangeRate"
            }
          },
          {
            "name": "endingExchangeRateDecimals",
            "type": "u8"
          },
          {
            "name": "maxDeposits",
            "type": "u64"
          },
          {
            "name": "fees",
            "type": {
              "defined": "VaultFees"
            }
          }
        ]
      },
      {
        "name": "updateVaultParameters",
        "docs": [
          "Instruction for updating configurable parameters of VaultAccount."
        ],
        "accounts": [
          {
            "name": "ownerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "maxDeposits",
            "type": "u64"
          },
          {
            "name": "fees",
            "type": {
              "defined": "VaultFees"
            }
          }
        ]
      },
      {
        "name": "updateVaultAuthorities",
        "docs": [
          "Instruction for updating authorities of VaultAccount."
        ],
        "accounts": [
          {
            "name": "ownerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "managerAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "updateFeeAccount",
        "docs": [
          "Instruction for updating fee account for VaultAccount."
        ],
        "accounts": [
          {
            "name": "ownerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "feeTokenAccount",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "startOptionsCycle",
        "docs": [
          "Instruction for starting the options cycle."
        ],
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "activeCollateralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "endTimestamp",
            "type": "i64"
          }
        ]
      },
      {
        "name": "endOptionsCycle",
        "docs": [
          "Instruction for ending the options cycle."
        ],
        "accounts": [
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "nextEpochHistory",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "feeTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "activeCollateralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "withdrawalCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenMint",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "marginAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "payer",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "settleOptions",
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "settlementAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "settlementAssetMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "euroMeta",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "expirationData",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "optionTokenMint",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "optionTokenSrc",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "collateralPool",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "poolAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "euroPrimitiveProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "otcSwapAsset",
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "collateralAssetMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "settlementAssetMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "activeCollateralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "stagingAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "Token account containing proceeds from option settlement."
            ]
          },
          {
            "name": "taskerPaymentAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "Tasker has tokens in this account that will be exchanged (for the tokens in",
              "staging account) and deposited to the active collateral account.",
              "The tasker chooses this account."
            ]
          },
          {
            "name": "taskerDestinationAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "Auction currency is transferred to this account at the end of the instruction."
            ]
          },
          {
            "name": "currentEpochHistory",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "declaredPrice",
            "type": "u64"
          },
          {
            "name": "stagingAmountToTrade",
            "type": "u64"
          }
        ]
      },
      {
        "name": "initializeDepositReceipt",
        "docs": [
          "Instruction for initializing DepositReceipt."
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "depositReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "transferToDepositReceipt",
        "docs": [
          "Instruction for handling deposits using DepositReceipt."
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "depositReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "currentEpochHistory",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "userCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "transferAmount",
            "type": "u64"
          }
        ]
      },
      {
        "name": "transferFromDepositReceipt",
        "docs": [
          "Instruction for handling transfers of collateral asset from a DepositReceipt."
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "depositReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "userCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "transferAmount",
            "type": "u64"
          }
        ]
      },
      {
        "name": "payoutDepositReceipt",
        "docs": [
          "Instruction for paying out a DepositReceipt to owner after epoch completes."
        ],
        "accounts": [
          {
            "name": "feeReceiver",
            "isMut": true,
            "isSigner": true,
            "docs": [
              "Account receiving rent from closing of account as reward for invoking transaction."
            ]
          },
          {
            "name": "depositReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "receivingVaultTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "initializeWithdrawalReceipt",
        "docs": [
          "Instruction for initializing WithdrawalReceipt."
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "withdrawalReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "transferToWithdrawalReceipt",
        "docs": [
          "Instruction for handling withdrawals using WithdrawalReceipt."
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "withdrawalReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "userVaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "vaultTokenAmount",
            "type": "u64"
          }
        ]
      },
      {
        "name": "transferFromWithdrawalReceipt",
        "docs": [
          "Instruction for handling transfers from a WithdrawalReceipt."
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "withdrawalReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "userVaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "vaultTokenAmount",
            "type": "u64"
          }
        ]
      },
      {
        "name": "payoutWithdrawalReceipt",
        "docs": [
          "Instruction for paying out a WithdrawalReceipt to owner after epoch completes."
        ],
        "accounts": [
          {
            "name": "feeReceiver",
            "isMut": true,
            "isSigner": true,
            "docs": [
              "Account receiving rent from closing of account as reward for invoking transaction."
            ]
          },
          {
            "name": "withdrawalReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "receiptOwnerCollateralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "withdrawalCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "feeTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "receiptOwner",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tempSolAccount",
            "isMut": true,
            "isSigner": true,
            "docs": [
              "Temporary token account created for unwrapping of SOL to native lamports.",
              "Closed at end of transaction."
            ]
          },
          {
            "name": "nativeMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "rent",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "deposit",
        "docs": [
          "Instruction for regular deposits when options are not active"
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "userCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "userVaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenMint",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "collateralAmount",
            "type": "u64"
          }
        ]
      },
      {
        "name": "withdraw",
        "docs": [
          "Instruction for regular withdrawals when options are not active."
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "userCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "userVaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "feeTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenMint",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "vaultTokenAmount",
            "type": "u64"
          }
        ]
      },
      {
        "name": "initializeSerumOpenOrders",
        "docs": [
          "Instruction for initializing an Open Orders account."
        ],
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "payer",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "vaultAuthority",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "openOrders",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "serumMarket",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "psyMarketAuthority",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "optionMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "euroPrimitiveProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "dexProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "rent",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "placeSerumOrder",
        "docs": [
          "Instruction for placing a limit sell order for option tokens on Serum."
        ],
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "euroMeta",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "optionTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "activeCollateralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "eventQueue",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "requestQueue",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "bids",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "asks",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "coinVault",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "priceCurrencyVault",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "openOrders",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "serumMarket",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "optionMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "euroPrimitiveProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "dexProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "rent",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "limitPrice",
            "type": "u64"
          },
          {
            "name": "maxCoinQty",
            "type": "u64"
          },
          {
            "name": "maxPcQty",
            "type": "u64"
          },
          {
            "name": "clientOrderId",
            "type": "u64"
          }
        ]
      },
      {
        "name": "settleSerumOrder",
        "docs": [
          "Instruction for settling Serum order after sale or cancellation."
        ],
        "accounts": [
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "activeCollateralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "euroMeta",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "optionMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "optionTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "coinVault",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "priceCurrencyVault",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "openOrders",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "serumMarket",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "serumVaultSigner",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "referralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "euroPrimitiveProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "dexProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "cancelSerumOrder",
        "docs": [
          "Instruction for cancelling a Serum order."
        ],
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "euroMeta",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "eventQueue",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "bids",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "asks",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "openOrders",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "serumMarket",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "optionMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "euroPrimitiveProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "dexProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "clientOrderId",
            "type": "u64"
          }
        ]
      },
      {
        "name": "initializeZetaMarginAccount",
        "docs": [
          "Zeta Instructions"
        ],
        "accounts": [
          {
            "name": "payer",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "marginAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Zeta asset margin account. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaGroup",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Zeta asset group. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "safetyThreshold",
            "type": "u64"
          }
        ]
      },
      {
        "name": "initZetaOpenOrders",
        "accounts": [
          {
            "name": "payer",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "marginAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Zeta asset margin account. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaGroup",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Zeta asset group. Checked by Zeta Program."
            ]
          },
          {
            "name": "state",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "market",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "serumAuthority",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "openOrdersMap",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "openOrders",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "zetaProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "dexProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "rent",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "safetyThreshold",
            "type": "u64"
          }
        ]
      },
      {
        "name": "depositZeta",
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "activeCollateralAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "marginAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Zeta asset margin account. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaGroup",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Zeta asset group. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaVault",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "socializedLossAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "state",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "greeks",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "zetaProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "amount",
            "type": "u64"
          }
        ]
      },
      {
        "name": "withdrawZeta",
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "marginAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Zeta asset margin account. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaGroup",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Zeta asset group. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaVault",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "activeCollateralAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "socializedLossAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "state",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "greeks",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "oracle",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "zetaProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "amount",
            "type": "u64"
          }
        ]
      },
      {
        "name": "placeZetaOrder",
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "marginAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Zeta asset margin account. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaGroup",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Zeta asset group. Checked by Zeta Program."
            ]
          },
          {
            "name": "state",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "serumAuthority",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "greeks",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "openOrders",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "marketNode",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "marketMint",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "mintAuthority",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "oracle",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "zetaProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "dexProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "rent",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "market",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "Market Accounts",
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "requestQueue",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "eventQueue",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "bids",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "asks",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "orderPayerTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "coinVault",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "pcVault",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "coinWallet",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "pcWallet",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "whitelistedFeeAccount",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Validating that account is owned by Zeta program if not empty.",
              "Does not validate seeds or account type."
            ]
          }
        ],
        "args": [
          {
            "name": "price",
            "type": "u64"
          },
          {
            "name": "size",
            "type": "u64"
          },
          {
            "name": "side",
            "type": "u8"
          },
          {
            "name": "orderType",
            "type": "u8"
          },
          {
            "name": "clientOrderId",
            "type": {
              "option": "u64"
            }
          }
        ]
      },
      {
        "name": "cancelZetaOrder",
        "accounts": [
          {
            "name": "taskerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultAuthority",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "marginAccount",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "TODO: Check that seeds matches for PDA.",
              "CHECKED: Zeta asset margin account. Checked by Zeta Program."
            ]
          },
          {
            "name": "zetaGroup",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Zeta asset group. Checked by Zeta Program."
            ]
          },
          {
            "name": "state",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "serumAuthority",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "openOrders",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "market",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "eventQueue",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "bids",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "asks",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "zetaProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECKED: Account checked by Zeta Program."
            ]
          },
          {
            "name": "dexProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "TODO: Check that this matches Zeta's Dex.",
              "CHECKED: Account checked by Zeta Program."
            ]
          }
        ],
        "args": [
          {
            "name": "side",
            "type": "u8"
          },
          {
            "name": "orderId",
            "type": "u128"
          }
        ]
      },
      {
        "name": "transferToDepositReceiptForStaking",
        "docs": [
          "Instructions for Staking."
        ],
        "accounts": [
          {
            "name": "userAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "depositReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "currentEpochHistory",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "userCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultCollateralAssetAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "stakingRecord",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "stakePool",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "transferAmount",
            "type": "u64"
          },
          {
            "name": "lockupPeriod",
            "type": "u8"
          },
          {
            "name": "forStaking",
            "type": "bool"
          }
        ]
      },
      {
        "name": "claimRewardForStaker",
        "accounts": [
          {
            "name": "depositReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "stakingRecord",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "stakePool",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "rewardPool",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "startRewardRecord",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "endRewardRecord",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "allocatedTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "receivingTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "stakingProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "payoutDepositReceiptToStaking",
        "accounts": [
          {
            "name": "feeReceiver",
            "isMut": true,
            "isSigner": true,
            "docs": [
              "Account receiving rent from closing of account as reward for invoking transaction."
            ]
          },
          {
            "name": "depositReceipt",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "vaultOwnershipTokenMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "epochHistory",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "receiptOwnerVaultTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "stakingRecord",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "stakePool",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "stakingTokenAccount",
            "isMut": true,
            "isSigner": false
          },
          {
            "name": "stakingProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": []
      },
      {
        "name": "createMetaplexMetadata",
        "docs": [
          "Instruction for creating a Metaplex Metadata account for Vault Ownership Token,",
          "with Vault Owner as the update authority."
        ],
        "accounts": [
          {
            "name": "vaultOwnershipTokenMint",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "payer",
            "isMut": true,
            "isSigner": true
          },
          {
            "name": "ownerAuthority",
            "isMut": false,
            "isSigner": true
          },
          {
            "name": "vaultAccount",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenMetadataProgram",
            "isMut": false,
            "isSigner": false,
            "docs": [
              "CHECK : metaplex token metadata program id"
            ]
          },
          {
            "name": "metadata",
            "isMut": true,
            "isSigner": false,
            "docs": [
              "CHECK : metaplex token metadata PDA for storing metadata"
            ]
          },
          {
            "name": "systemProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "tokenProgram",
            "isMut": false,
            "isSigner": false
          },
          {
            "name": "rent",
            "isMut": false,
            "isSigner": false
          }
        ],
        "args": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "symbol",
            "type": "string"
          },
          {
            "name": "uri",
            "type": "string"
          }
        ]
      }
    ],
    "accounts": [
      {
        "name": "VaultAccount",
        "docs": [
          "Allocated Size = 2000 bytes, incl. buffer.",
          "Estimated Rent = 0.0148 SOL",
          "Current Size = (32 * 11 + 33 + 24 + 1 * 4 + 5 * 8 + 2)",
          "= 455 bytes + 8 bytes overhead."
        ],
        "type": {
          "kind": "struct",
          "fields": [
            {
              "name": "ownerAuthority",
              "docs": [
                "Authorized System Roles"
              ],
              "type": "publicKey"
            },
            {
              "name": "managerAuthority",
              "type": "publicKey"
            },
            {
              "name": "taskerAuthority",
              "type": "publicKey"
            },
            {
              "name": "vaultCollateralAssetAccount",
              "type": "publicKey"
            },
            {
              "name": "activeCollateralAccount",
              "type": "publicKey"
            },
            {
              "name": "withdrawalCollateralAssetAccount",
              "type": "publicKey"
            },
            {
              "name": "vaultOwnershipTokenAccount",
              "type": "publicKey"
            },
            {
              "name": "feeTokenAccount",
              "docs": [
                "Receipient of fees. Account can be owned by anyone and has to have",
                "collateral asset as mint."
              ],
              "type": "publicKey"
            },
            {
              "name": "collateralAssetMint",
              "type": "publicKey"
            },
            {
              "name": "vaultOwnershipTokenMint",
              "type": "publicKey"
            },
            {
              "name": "seedVaultTokenPerCollateral",
              "docs": [
                "Vault Constants",
                "Used for calculating number of tokens for first deposit into the Vault."
              ],
              "type": {
                "defined": "ExchangeRate"
              }
            },
            {
              "name": "endingExchangeRateDecimals",
              "docs": [
                "Decimals used for setting the epoch ending exchange rates."
              ],
              "type": "u8"
            },
            {
              "name": "strategyType",
              "type": "u8"
            },
            {
              "name": "vaultAccountBump",
              "type": "u8"
            },
            {
              "name": "uniqueSeed",
              "docs": [
                "Additional seed for Vault Account with the same collateral type and strategy."
              ],
              "type": "u16"
            },
            {
              "name": "maxDeposits",
              "docs": [
                "Vault Parameters (Modifiable by Vault Owner)"
              ],
              "type": "u64"
            },
            {
              "name": "fees",
              "type": {
                "defined": "VaultFees"
              }
            },
            {
              "name": "currentEpoch",
              "docs": [
                "Vault State"
              ],
              "type": "u64"
            },
            {
              "name": "currentEpochHistory",
              "type": "publicKey"
            },
            {
              "name": "pendingCollateralAssetDeposits",
              "type": "u64"
            },
            {
              "name": "pendingWithdrawalTokens",
              "type": "u64"
            },
            {
              "name": "initiatedDebt",
              "type": "u64"
            },
            {
              "name": "optionsActive",
              "type": "bool"
            }
          ]
        }
      },
      {
        "name": "EpochHistory",
        "docs": [
          "Allocated Size = 2000 bytes, incl. buffer.",
          "Current Size = 32 + 33 + 8 * 4 + 1 + 80 * 20",
          "= 1698 bytes + 8 bytes overhead."
        ],
        "type": {
          "kind": "struct",
          "fields": [
            {
              "name": "vaultAccount",
              "type": "publicKey"
            },
            {
              "name": "epoch",
              "type": "u64"
            },
            {
              "name": "epochHistoryBump",
              "type": "u8"
            },
            {
              "name": "endTimestamp",
              "type": "i64"
            },
            {
              "name": "collateralBeforeOptionsActive",
              "type": "u64"
            },
            {
              "name": "pnl",
              "type": "i64"
            },
            {
              "name": "endingCollateralPerVaultToken",
              "type": {
                "defined": "ExchangeRate"
              }
            },
            {
              "name": "optionPurchased",
              "type": {
                "vec": {
                  "defined": "OptionMarketMeta"
                }
              }
            },
            {
              "name": "optionSold",
              "type": {
                "vec": {
                  "defined": "OptionMarketMeta"
                }
              }
            }
          ]
        }
      },
      {
        "name": "DepositReceipt",
        "docs": [
          "Allocated Size = 250 bytes, incl. buffer.",
          "Estimated Rent = 0.00263 SOL",
          "Current Size = 32 * 4 + 8 + 3",
          "= 139 bytes + 8 bytes overhead."
        ],
        "type": {
          "kind": "struct",
          "fields": [
            {
              "name": "vaultAccount",
              "type": "publicKey"
            },
            {
              "name": "epochHistory",
              "type": "publicKey"
            },
            {
              "name": "receiptOwner",
              "type": "publicKey"
            },
            {
              "name": "depositAmount",
              "type": "u64"
            },
            {
              "name": "bump",
              "type": "u8"
            },
            {
              "name": "lockupPeriod",
              "type": "u8"
            },
            {
              "name": "forStaking",
              "type": "bool"
            },
            {
              "name": "stakingRecord",
              "type": "publicKey"
            }
          ]
        }
      },
      {
        "name": "WithdrawalReceipt",
        "docs": [
          "Allocated Size = 250 bytes, incl. buffer.",
          "Estimated Rent = 0.00263 SOL",
          "Current Size = 32 * 3 + 8 + 1",
          "= 105 bytes + 8 bytes overhead."
        ],
        "type": {
          "kind": "struct",
          "fields": [
            {
              "name": "vaultAccount",
              "type": "publicKey"
            },
            {
              "name": "epochHistory",
              "type": "publicKey"
            },
            {
              "name": "receiptOwner",
              "type": "publicKey"
            },
            {
              "name": "withdrawalAmount",
              "type": "u64"
            },
            {
              "name": "bump",
              "type": "u8"
            }
          ]
        }
      }
    ],
    "types": [
      {
        "name": "OptionMarketMeta",
        "docs": [
          "Size = (32 * 2 + 16) = 80 bytes"
        ],
        "type": {
          "kind": "struct",
          "fields": [
            {
              "name": "optionMarketInfo",
              "type": "publicKey"
            },
            {
              "name": "optionTokenAccount",
              "type": "publicKey"
            },
            {
              "name": "cost",
              "type": "i64"
            },
            {
              "name": "contractsHeld",
              "type": "u64"
            }
          ]
        }
      },
      {
        "name": "ExchangeRate",
        "docs": [
          "Size = 33 bytes"
        ],
        "type": {
          "kind": "struct",
          "fields": [
            {
              "name": "rate",
              "docs": [
                "The number of units of the \"to\" asset to receive per unit of the \"from\"",
                "asset. This number is in the native \"to\" units, adjusted by the decimals",
                "of the exchange rate, to support higher precision rates."
              ],
              "type": "u128"
            },
            {
              "name": "decimals",
              "docs": [
                "Decimals for the exchange rate"
              ],
              "type": "u8"
            }
          ]
        }
      },
      {
        "name": "VaultFees",
        "docs": [
          "Size = 24 bytes"
        ],
        "type": {
          "kind": "struct",
          "fields": [
            {
              "name": "managementFeeBps",
              "docs": [
                "Percentage fee to collect on collateral asset per epoch."
              ],
              "type": "u64"
            },
            {
              "name": "performanceFeeBps",
              "docs": [
                "Percentage fee to collect on Option Sale per epoch."
              ],
              "type": "u64"
            },
            {
              "name": "withdrawalFeeBps",
              "docs": [
                "Percentage fee to collect on withdrawal."
              ],
              "type": "u64"
            }
          ]
        }
      },
      {
        "name": "StrategyType",
        "type": {
          "kind": "enum",
          "variants": [
            {
              "name": "MarketMaking"
            }
          ]
        }
      }
    ],
    "errors": [
      {
        "code": 6000,
        "name": "LowUserBalance",
        "msg": "Insufficient balance in user account for the collateral asset."
      },
      {
        "code": 6001,
        "name": "LowVaultToken",
        "msg": "Insufficient Vault Ownership Token"
      },
      {
        "code": 6002,
        "name": "MaxVaultCapacity",
        "msg": "Maximum Vault Capacity has been reached"
      },
      {
        "code": 6003,
        "name": "DepositingNotSupported",
        "msg": "Depositing when options are active is not supported."
      },
      {
        "code": 6004,
        "name": "WithdrawingNotSupported",
        "msg": "Withdrawing when options are active is not supported."
      },
      {
        "code": 6005,
        "name": "DepositReceiptNotSupported",
        "msg": "Please deposit directly into vault when options are not active."
      },
      {
        "code": 6006,
        "name": "WithdrawalReceiptNotSupported",
        "msg": "Please withdraw directly from vault when options are not active."
      },
      {
        "code": 6007,
        "name": "MaximumFeesExceeded",
        "msg": "Maximum configurable fees exceeded."
      },
      {
        "code": 6008,
        "name": "InvalidTokenBalance",
        "msg": "Final token balance does not match expected."
      },
      {
        "code": 6009,
        "name": "EndTimestampNotPassed",
        "msg": "Cannot end epoch before end timestamp"
      },
      {
        "code": 6010,
        "name": "OptionTokenConstraint",
        "msg": "Option token account constraint error."
      },
      {
        "code": 6011,
        "name": "InsufficientAmountInDepositReceipt",
        "msg": "Insufficient amount in Deposit Receipt for instruction."
      },
      {
        "code": 6012,
        "name": "InsufficientAmountInWithdrawalReceipt",
        "msg": "Insufficient amount in Withdrawal Receipt for instruction."
      },
      {
        "code": 6013,
        "name": "OptionsNotActive",
        "msg": "Option Market has not yet started."
      },
      {
        "code": 6014,
        "name": "PayoutPendingEpochEnd",
        "msg": "Receipt can only be paid out after the epoch has ended."
      },
      {
        "code": 6015,
        "name": "EpochHistoryConstraint",
        "msg": "EpochHistory constraint error."
      },
      {
        "code": 6016,
        "name": "UserCollateralConstraint",
        "msg": "User collateral asset account constraint error."
      },
      {
        "code": 6017,
        "name": "UserVaultTokenConstraint",
        "msg": "User vault token account constraint error."
      },
      {
        "code": 6018,
        "name": "WithdrawalCollateralConstraint",
        "msg": "Withdrawal collateral asset account constraint error."
      },
      {
        "code": 6019,
        "name": "VaultCollateralConstraint",
        "msg": "Vault collateral asset account constraint error."
      },
      {
        "code": 6020,
        "name": "VaultTokenAccountConstraint",
        "msg": "Vault's vault token account constraint error."
      },
      {
        "code": 6021,
        "name": "DepositReceiptConstraint",
        "msg": "Deposit receipt constraint error."
      },
      {
        "code": 6022,
        "name": "WithdrawalReceiptConstraint",
        "msg": "Withdrawal receipt constraint error."
      },
      {
        "code": 6023,
        "name": "FeeTokenAccountConstraint",
        "msg": "Fee token account constraint error."
      },
      {
        "code": 6024,
        "name": "EuroMetaConstraint",
        "msg": "EuroMeta constraint error."
      },
      {
        "code": 6025,
        "name": "UnsupportedStrategy",
        "msg": "Unsuported Strategy."
      },
      {
        "code": 6026,
        "name": "EuroProgramMismatch",
        "msg": "Euro Primitive Program Id mismatch."
      },
      {
        "code": 6027,
        "name": "DexMismatch",
        "msg": "Serum DEX Program Id mismatch."
      },
      {
        "code": 6028,
        "name": "OptionsAlreadyStarted",
        "msg": "Options cycle has started."
      },
      {
        "code": 6029,
        "name": "AmountMustBeGreaterThanZero",
        "msg": "Amount must be greater than 0."
      },
      {
        "code": 6030,
        "name": "BpsLimitExceeded",
        "msg": "Bps cannot exceed 10000"
      },
      {
        "code": 6031,
        "name": "PayoutForStaking",
        "msg": "Cannot payout receipt that is set for staking."
      },
      {
        "code": 6032,
        "name": "ReceiptNotForStaking",
        "msg": "Cannot stake or claim reward for receipt, when receipt is not for staking."
      },
      {
        "code": 6033,
        "name": "OwnerMismatch",
        "msg": "Owner of staking record and receipt does not match."
      },
      {
        "code": 6034,
        "name": "StakePoolMismatch",
        "msg": "StakePool does not match."
      },
      {
        "code": 6035,
        "name": "StakingRecordMismatch",
        "msg": "StakingRecord does not match."
      },
      {
        "code": 6036,
        "name": "InvalidLockupPeriod",
        "msg": "Invalid lockup period selected."
      },
      {
        "code": 6037,
        "name": "UnclaimedRewardPool",
        "msg": "Some RewardPool is unclaimed."
      },
      {
        "code": 6038,
        "name": "ClaimRewardPendingEpochEnd",
        "msg": "Reward can only be claimed for DepositReceipt after epoch ends."
      },
      {
        "code": 6039,
        "name": "MarketStateError",
        "msg": "Error loading Serum market state."
      },
      {
        "code": 6040,
        "name": "AuctionMintMismatch",
        "msg": "The mint specified for the auction currency doesn't match the vault."
      },
      {
        "code": 6041,
        "name": "TaskerSignerError",
        "msg": "Tasker did not sign this transaction."
      },
      {
        "code": 6042,
        "name": "TaskerValidationError",
        "msg": "Account specified as tasker is not the authorized tasker on this vault."
      },
      {
        "code": 6043,
        "name": "TaskerCollateralAccountValidationError",
        "msg": "Collateral destination does not match vault's collateral account."
      },
      {
        "code": 6044,
        "name": "EpochHistoryValidationError",
        "msg": "Account specified as epoch history is not the epoch history on this vault."
      },
      {
        "code": 6045,
        "name": "OracleConfidenceError",
        "msg": "Pyth Oracle confidence too low to price accurately, try again later."
      },
      {
        "code": 6046,
        "name": "OracleResponseIssue",
        "msg": "Pyth Oracle responding with zero or negative price."
      },
      {
        "code": 6047,
        "name": "OracleExponentIssue",
        "msg": "Pyth Oracle esponding with non-negative exponent."
      },
      {
        "code": 6048,
        "name": "OracleValidationError",
        "msg": "Oracle doesn't match vault Oracle."
      },
      {
        "code": 6049,
        "name": "TaskerMintMismatch",
        "msg": "The mint used for tasker's payment doesn't match the collateral pool."
      },
      {
        "code": 6050,
        "name": "TokenOwnerMismatch",
        "msg": "Invalid owner of token account."
      },
      {
        "code": 6051,
        "name": "TaskerNotEnoughAssets",
        "msg": "Tasker is not bringing enough underlying assets, offer more assets."
      },
      {
        "code": 6052,
        "name": "TaskerDeclaredPriceTooLow",
        "msg": "Tasker's declared price is too low: offer a better exchange rate."
      },
      {
        "code": 6053,
        "name": "TaskerDeclaredPriceTooHigh",
        "msg": "Tasker's declared price is too high: check for typo."
      },
      {
        "code": 6054,
        "name": "StagingAccountEmpty",
        "msg": "The staging account has no assets: perhaps the auction has not ended?"
      },
      {
        "code": 6055,
        "name": "NumericalOverflow",
        "msg": "Numerical Overflow"
      },
      {
        "code": 6056,
        "name": "OptionWriterMismatchError",
        "msg": "Option and Writer token size mismatch."
      },
      {
        "code": 6057,
        "name": "InvalidNativeMint",
        "msg": "Invalid native mint provided"
      },
      {
        "code": 6058,
        "name": "InvalidReceiptOwner",
        "msg": "Receipt owner provided does not match owner recorded"
      },
      {
        "code": 6059,
        "name": "OracleNotSupported",
        "msg": "Instruction is not supported by oracle type."
      },
      {
        "code": 6060,
        "name": "DurationTooShort",
        "msg": "Duration too short"
      },
      {
        "code": 6061,
        "name": "DebtNotRepaid",
        "msg": "Epoch cannot end before debt is repaid"
      },
      {
        "code": 6062,
        "name": "UnsettledOptions",
        "msg": "There are still options held that remain unsettled"
      },
      {
        "code": 6063,
        "name": "UnswappedFunds",
        "msg": "There are still funds that remain unswapped"
      },
      {
        "code": 6064,
        "name": "FundsInMargin",
        "msg": "There are still remaining funds held in margin account"
      },
      {
        "code": 6065,
        "name": "VectorMaxedOut",
        "msg": "Vector has maxed out."
      },
      {
        "code": 6066,
        "name": "ActivePosition",
        "msg": "Active position remaining in margin account"
      },
      {
        "code": 6067,
        "name": "DestMustBeActiveAccount",
        "msg": "Destination of collateral must be active collateral account"
      },
      {
        "code": 6068,
        "name": "DestMustBeATA",
        "msg": "Destination of collateral must be an asssociated token account"
      },
      {
        "code": 6069,
        "name": "ZetaIDMismatch",
        "msg": "Zeta program ID mismatch"
      },
      {
        "code": 6070,
        "name": "ZetaDrainAlert",
        "msg": "Zeta CPI drained a significant amount and was blocked. Reduce the safety threshold."
      }
    ]
  }